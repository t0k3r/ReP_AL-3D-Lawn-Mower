// Libraries Required 
#include <Wire.h> 
#include <HMC5883L.h> 

HMC5883L compass;   	// Store the compass as an object.
int error = 0; 		// Record any errors that may occur in the compass. 



void Setup {

Wire.begin(); 		// Start the I2C interface.


put into compass setup for HMC5883L


// Type 1 Compass is a QMC5883
if (Compass_Type == 1)  {

//QMC Code

  } 



// Type 2 Compass is a HMC5883L
if (Compass_Type == 2)  {

compass = HMC5883L(); 
Serial.println("Setting scale to +/- 1.3 Ga"); 
error = compass.SetScale(1.3); 				// Set the scale of the compass to 1.3Ga 
if(error != 0){ 					// If there is an error, print it out.  
  Serial.println(compass.GetErrorText(error)); 
  error =0; 
  } 

Serial.println("Setting measurement mode to continous."); 
error = compass.SetMeasurementMode(Measurement_Continuous); 	// Set the measurement mode to Continuous 
if(error != 0) {						// If there is an error, print it out. 
  Serial.println(compass.GetErrorText(error)); 			//Todo: Error handling for this method in .h and .cpp 
  error=0; 
  } 
}







if (Compass_Type == 1)  {

//QMC Code read degrees

  } 


//Compass HMC5883L code to read degrees

if (Compass_Type == 2)  {

MagnetometerRaw raw = compass.ReadRawAxis();			// Get raw values from magnetometer
MagnetometerScaled scaled = compass.ReadScaledAxis();		// Get scaled values from magnetometer
int MilliGauss_OnThe_XAxis = scaled.XAxis;			// (or YAxis, or ZAxis)
float heading = atan2(scaled.YAxis, scaled.XAxis);		// Caluclate heading

float declinationAngle = 0.0404; 				// adjustment for local location on compass	
heading += declinationAngle; 


if(heading < 0) 
8heading += 2*PI; 

if(heading > 2*PI)  						// Check for wrap due to addition of declination. 
heading -= 2*PI; 

float headingDegrees = heading * 180/M_PI; 			// Convert radians to degrees for readability.

}

